syntax = "proto3";

package database_service;

// Database Service for storage operations
service DatabaseService {
  // Basic operations
  rpc Get(GetRequest) returns (GetResponse);
  rpc Put(PutRequest) returns (PutResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc BatchOperation(BatchOperationRequest) returns (BatchOperationResponse);
  
  // Collection operations
  rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse);
  rpc DropCollection(DropCollectionRequest) returns (DropCollectionResponse);
  
  // Query operations
  rpc Query(QueryRequest) returns (QueryResponse);
  rpc StreamQuery(QueryRequest) returns (stream QueryResponse);
  
  // Indexing
  rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse);
  rpc ListIndices(ListIndicesRequest) returns (ListIndicesResponse);
  rpc DropIndex(DropIndexRequest) returns (DropIndexResponse);
  
  // Transactions
  rpc BeginTransaction(BeginTransactionRequest) returns (BeginTransactionResponse);
  rpc CommitTransaction(CommitTransactionRequest) returns (CommitTransactionResponse);
  rpc RollbackTransaction(RollbackTransactionRequest) returns (RollbackTransactionResponse);
  
  // Health and management
  rpc GetDatabaseStatus(GetDatabaseStatusRequest) returns (GetDatabaseStatusResponse);
  rpc GetDatabaseMetrics(GetDatabaseMetricsRequest) returns (GetDatabaseMetricsResponse);
  rpc Ping(PingRequest) returns (PingResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Basic operations
message GetRequest {
  string collection = 1;
  string key = 2;
  string transaction_id = 3;
}

message GetResponse {
  bool success = 1;
  bytes value = 2;
  string error_message = 3;
}

message PutRequest {
  string collection = 1;
  string key = 2;
  bytes value = 3;
  string transaction_id = 4;
}

message PutResponse {
  bool success = 1;
  string error_message = 2;
}

message DeleteRequest {
  string collection = 1;
  string key = 2;
  string transaction_id = 3;
}

message DeleteResponse {
  bool success = 1;
  string error_message = 2;
}

message BatchOperationRequest {
  string collection = 1;
  repeated Operation operations = 2;
  string transaction_id = 3;
}

message Operation {
  OperationType type = 1;
  string key = 2;
  bytes value = 3;
}

enum OperationType {
  OPERATION_GET = 0;
  OPERATION_PUT = 1;
  OPERATION_DELETE = 2;
}

message BatchOperationResponse {
  bool success = 1;
  repeated OperationResult results = 2;
  string error_message = 3;
}

message OperationResult {
  bool success = 1;
  bytes value = 2;
  string error_message = 3;
}

// Collection operations
message CreateCollectionRequest {
  string name = 1;
  CollectionConfig config = 2;
}

message CollectionConfig {
  string storage_engine = 1;
  bool enable_versioning = 2;
  bool enable_compression = 3;
  map<string, string> custom_options = 4;
}

message CreateCollectionResponse {
  bool success = 1;
  string error_message = 2;
}

message ListCollectionsRequest {
  string pattern = 1;
}

message ListCollectionsResponse {
  repeated CollectionInfo collections = 1;
}

message CollectionInfo {
  string name = 1;
  CollectionConfig config = 2;
  CollectionStats stats = 3;
}

message CollectionStats {
  uint64 document_count = 1;
  uint64 size_bytes = 2;
  uint64 index_count = 3;
}

message DropCollectionRequest {
  string name = 1;
  bool force = 2;
}

message DropCollectionResponse {
  bool success = 1;
  string error_message = 2;
}

// Query operations
message QueryRequest {
  string collection = 1;
  QueryFilter filter = 2;
  QueryOptions options = 3;
  string transaction_id = 4;
}

message QueryFilter {
  map<string, FilterValue> conditions = 1;
  string expression = 2;
}

message FilterValue {
  oneof value {
    string string_value = 1;
    int64 int_value = 2;
    double double_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
  }
  FilterOperator operator = 6;
}

enum FilterOperator {
  FILTER_EQUAL = 0;
  FILTER_NOT_EQUAL = 1;
  FILTER_GREATER_THAN = 2;
  FILTER_LESS_THAN = 3;
  FILTER_GREATER_EQUAL = 4;
  FILTER_LESS_EQUAL = 5;
  FILTER_CONTAINS = 6;
  FILTER_STARTS_WITH = 7;
  FILTER_ENDS_WITH = 8;
}

message QueryOptions {
  uint32 limit = 1;
  uint32 offset = 2;
  repeated SortField sort_fields = 3;
  bool include_deleted = 4;
}

message SortField {
  string field = 1;
  SortDirection direction = 2;
}

enum SortDirection {
  SORT_ASC = 0;
  SORT_DESC = 1;
}

message QueryResponse {
  bool success = 1;
  repeated QueryResult results = 2;
  uint32 total_count = 3;
  bool has_more = 4;
  string error_message = 5;
}

message QueryResult {
  string key = 1;
  bytes value = 2;
  map<string, string> metadata = 3;
}

// Indexing
message CreateIndexRequest {
  string collection = 1;
  IndexDefinition index = 2;
}

message IndexDefinition {
  string name = 1;
  repeated IndexField fields = 2;
  IndexType type = 3;
  map<string, string> options = 4;
}

message IndexField {
  string field = 1;
  SortDirection direction = 2;
}

enum IndexType {
  INDEX_BTREE = 0;
  INDEX_HASH = 1;
  INDEX_FULLTEXT = 2;
  INDEX_SPATIAL = 3;
}

message CreateIndexResponse {
  bool success = 1;
  string error_message = 2;
}

message ListIndicesRequest {
  string collection = 1;
}

message ListIndicesResponse {
  repeated IndexInfo indices = 1;
}

message IndexInfo {
  IndexDefinition definition = 1;
  IndexStats stats = 2;
}

message IndexStats {
  uint64 size_bytes = 1;
  uint64 entry_count = 2;
  double selectivity = 3;
}

message DropIndexRequest {
  string collection = 1;
  string index_name = 2;
}

message DropIndexResponse {
  bool success = 1;
  string error_message = 2;
}

// Transactions
message BeginTransactionRequest {
  TransactionOptions options = 1;
}

message TransactionOptions {
  TransactionIsolation isolation = 1;
  uint32 timeout_seconds = 2;
  bool read_only = 3;
}

enum TransactionIsolation {
  ISOLATION_READ_UNCOMMITTED = 0;
  ISOLATION_READ_COMMITTED = 1;
  ISOLATION_REPEATABLE_READ = 2;
  ISOLATION_SERIALIZABLE = 3;
}

message BeginTransactionResponse {
  bool success = 1;
  string transaction_id = 2;
  string error_message = 3;
}

message CommitTransactionRequest {
  string transaction_id = 1;
}

message CommitTransactionResponse {
  bool success = 1;
  string error_message = 2;
}

message RollbackTransactionRequest {
  string transaction_id = 1;
}

message RollbackTransactionResponse {
  bool success = 1;
  string error_message = 2;
}

// Health and management
message GetDatabaseStatusRequest {
  bool include_details = 1;
}

message GetDatabaseStatusResponse {
  DatabaseStatus status = 1;
  DatabaseInfo info = 2;
}

enum DatabaseStatus {
  DATABASE_STATUS_UNKNOWN = 0;
  DATABASE_STATUS_STARTING = 1;
  DATABASE_STATUS_RUNNING = 2;
  DATABASE_STATUS_STOPPING = 3;
  DATABASE_STATUS_STOPPED = 4;
  DATABASE_STATUS_ERROR = 5;
}

message DatabaseInfo {
  string version = 1;
  uint64 uptime_seconds = 2;
  uint32 collection_count = 3;
  uint64 total_size_bytes = 4;
  DatabaseMetrics metrics = 5;
}

message GetDatabaseMetricsRequest {
  uint64 start_time = 1;
  uint64 end_time = 2;
  repeated string metric_names = 3;
}

message GetDatabaseMetricsResponse {
  repeated DatabaseMetric metrics = 1;
}

message DatabaseMetric {
  string name = 1;
  string type = 2;
  repeated MetricDataPoint data_points = 3;
  map<string, string> labels = 4;
}

message MetricDataPoint {
  uint64 timestamp = 1;
  double value = 2;
}

message DatabaseMetrics {
  uint64 reads_per_second = 1;
  uint64 writes_per_second = 2;
  double average_query_time_ms = 3;
  uint32 active_connections = 4;
  uint64 cache_hit_rate = 5;
}

message PingRequest {
  string client_id = 1;
  uint64 timestamp = 2;
}

message PingResponse {
  string server_id = 1;
  uint64 timestamp = 2;
  uint64 server_time = 3;
}

message HealthCheckRequest {
  repeated string services = 1;
  bool include_details = 2;
}

message HealthCheckResponse {
  OverallHealth overall_status = 1;
  repeated ServiceHealth service_health = 2;
  map<string, string> system_info = 3;
  uint64 timestamp = 4;
}

enum OverallHealth {
  HEALTH_UNKNOWN = 0;
  HEALTH_SERVING = 1;
  HEALTH_NOT_SERVING = 2;
  HEALTH_SERVICE_UNKNOWN = 3;
}

message ServiceHealth {
  string service_name = 1;
  OverallHealth status = 2;
  string message = 3;
  map<string, string> details = 4;
}
