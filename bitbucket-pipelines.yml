image: rust:latest

definitions:
  caches:
    cargo: ~/.cargo/registry
  deployments:
    development:
      - development
    production:
      - production
  steps:
    - step: &format-check
        name: Format Check
        script:
          - apt-get update && apt-get install -y curl pkg-config libssl-dev
          - rustup update stable
          - rustup component add rustfmt
          - cargo fmt --all -- --check
        caches:
          - cargo
    - step: &lint-check
        name: Lint Check
        script:
          - apt-get update && apt-get install -y curl pkg-config libssl-dev
          - rustup default nightly
          - rustup component add clippy rust-src
          - cargo clippy --workspace -- -D warnings
        caches:
          - cargo
    - step: &test
        name: Build and Test
        script:
          - apt-get update && apt-get install -y curl pkg-config libssl-dev
          - rustup default nightly
          - cargo build --workspace
          - cargo test --workspace
        caches:
          - cargo
    - step: &deploy-dev
        name: Deploy to Development
        deployment: development
        script:
          - apt-get update && apt-get install -y openssh-client
          - mkdir -p ~/.ssh
          - chmod 700 ~/.ssh
          - echo "$SSH_PRIVATE_KEY_DEV" > ~/.ssh/id_rsa
          - chmod 600 ~/.ssh/id_rsa
          - echo "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          - |
            ssh azureuser@$DEV_SERVER '
              sudo apt-get update &&
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &&
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
              sudo apt-get update &&
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io &&
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
              sudo chmod +x /usr/local/bin/docker-compose &&
              sudo usermod -aG docker $USER &&
              cd /opt/dotvm &&
              mkdir -p monitoring/prometheus &&
              git pull origin develop &&
              sudo docker-compose -f docker-compose.dev.yml up -d --build'
          - 'echo "Development Environment Dashboards"'
          - 'echo "Prometheus: http://${DEV_SERVER}:9090"'
          - 'echo "Application: http://${DEV_SERVER}:8080"'
    - step: &deploy-prod
        name: Deploy to Production
        deployment: production
        trigger: manual
        script:
          - apt-get update && apt-get install -y openssh-client
          - mkdir -p ~/.ssh
          - chmod 700 ~/.ssh
          - echo "$SSH_PRIVATE_KEY_PROD" > ~/.ssh/id_rsa
          - chmod 600 ~/.ssh/id_rsa
          - echo "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          - |
            ssh azureuser@$PROD_SERVER '
              sudo apt-get update &&
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &&
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &&
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" &&
              sudo apt-get update &&
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io &&
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
              sudo chmod +x /usr/local/bin/docker-compose &&
              sudo usermod -aG docker $USER &&
              cd /opt/dotvm &&
              mkdir -p monitoring/prometheus &&
              git pull origin main &&
              sudo docker-compose -f docker-compose.prod.yml up -d --build'
          - 'echo "Production Environment Dashboards"'
          - 'echo "Application: http://${PROD_SERVER}:8080"'
          - 'echo "Prometheus: http://${PROD_SERVER}:9090"'
          - 'echo "Grafana: http://${PROD_SERVER}:3000"'
          - 'echo "(default credentials -> username:admin, password: admin)"'

pipelines:
  default:
    - parallel:
        - step: *format-check
        - step: *lint-check
        - step: *test
  pull-requests:
    '**':
      - parallel:
          - step: *format-check
          - step: *lint-check
          - step: *test
  branches:
    develop:
      - parallel:
          - step: *format-check
          - step: *lint-check
          - step: *test
      - step: *deploy-dev
    main:
      - parallel:
          - step: *format-check
          - step: *lint-check
          - step: *test
      - step:
          name: Release Build
          script:
            - apt-get update && apt-get install -y curl pkg-config libssl-dev
            - rustup default nightly
            - cargo build --workspace --release
          caches:
            - cargo
      - step: *deploy-prod

  custom:
    manual-deploy-dev:
      - step: *deploy-dev
    manual-deploy-prod:
      - step: *deploy-prod